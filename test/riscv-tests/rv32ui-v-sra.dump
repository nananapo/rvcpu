
rv32ui-v-sra:     file format elf32-littleriscv


Disassembly of section .text.init:

00000000 <_start>:

  .section ".text.init","ax",@progbits
  .globl _start
  .align 2
_start:
  j handle_reset
   0:	00c0006f          	j	c <handle_reset>

00000004 <nmi_vector>:

  /* NMI vector */
  .align 2
nmi_vector:
  j wtf
   4:	3080206f          	j	230c <wtf>

00000008 <trap_vector>:

  .align 2
trap_vector:
  j wtf
   8:	3040206f          	j	230c <wtf>

0000000c <handle_reset>:

handle_reset:
  li x1, 0
   c:	00000093          	li	ra,0
  li x2, 0
  10:	00000113          	li	sp,0
  li x3, 0
  14:	00000193          	li	gp,0
  li x4, 0
  18:	00000213          	li	tp,0
  li x5, 0
  1c:	00000293          	li	t0,0
  li x6, 0
  20:	00000313          	li	t1,0
  li x7, 0
  24:	00000393          	li	t2,0
  li x8, 0
  28:	00000413          	li	s0,0
  li x9, 0
  2c:	00000493          	li	s1,0
  li x10, 0
  30:	00000513          	li	a0,0
  li x11, 0
  34:	00000593          	li	a1,0
  li x12, 0
  38:	00000613          	li	a2,0
  li x13, 0
  3c:	00000693          	li	a3,0
  li x14, 0
  40:	00000713          	li	a4,0
  li x15, 0
  44:	00000793          	li	a5,0
  li x16, 0
  48:	00000813          	li	a6,0
  li x17, 0
  4c:	00000893          	li	a7,0
  li x18, 0
  50:	00000913          	li	s2,0
  li x19, 0
  54:	00000993          	li	s3,0
  li x20, 0
  58:	00000a13          	li	s4,0
  li x21, 0
  5c:	00000a93          	li	s5,0
  li x22, 0
  60:	00000b13          	li	s6,0
  li x23, 0
  64:	00000b93          	li	s7,0
  li x24, 0
  68:	00000c13          	li	s8,0
  li x25, 0
  6c:	00000c93          	li	s9,0
  li x26, 0
  70:	00000d13          	li	s10,0
  li x27, 0
  74:	00000d93          	li	s11,0
  li x28, 0
  78:	00000e13          	li	t3,0
  li x29, 0
  7c:	00000e93          	li	t4,0
  li x30, 0
  80:	00000f13          	li	t5,0
  li x31, 0
  84:	00000f93          	li	t6,0

  INIT_RNMI
  88:	00000297          	auipc	t0,0x0
  8c:	01028293          	add	t0,t0,16 # 98 <handle_reset+0x8c>
  90:	30529073          	csrw	mtvec,t0
  94:	74445073          	csrw	0x744,8

  la t0, trap_vector
  98:	00000297          	auipc	t0,0x0
  9c:	f7028293          	add	t0,t0,-144 # 8 <trap_vector>
  csrw mtvec, t0
  a0:	30529073          	csrw	mtvec,t0
  la sp, STACK_TOP - SIZEOF_TRAPFRAME_T
  a4:	0000b117          	auipc	sp,0xb
  a8:	ecc10113          	add	sp,sp,-308 # af70 <freelist_head+0x3f6c>
  csrr t0, mhartid
  ac:	f14022f3          	csrr	t0,mhartid
  slli t0, t0, 12
  b0:	00c29293          	sll	t0,t0,0xc
  add sp, sp, t0
  b4:	00510133          	add	sp,sp,t0
  csrw mscratch, sp
  b8:	34011073          	csrw	mscratch,sp
  call extra_boot
  bc:	20d020ef          	jal	2ac8 <extra_boot>
  la a0, userstart
  c0:	00003517          	auipc	a0,0x3
  c4:	a1c50513          	add	a0,a0,-1508 # 2adc <userstart>
  j vm_boot
  c8:	7fc0206f          	j	28c4 <vm_boot>

000000cc <pop_tf>:

  .globl  pop_tf
pop_tf:
  LOAD  t0,33*REGBYTES(a0)
  cc:	08452283          	lw	t0,132(a0)
  csrw  sepc,t0
  d0:	14129073          	csrw	sepc,t0
  LOAD  x1,1*REGBYTES(a0)
  d4:	00452083          	lw	ra,4(a0)
  LOAD  x2,2*REGBYTES(a0)
  d8:	00852103          	lw	sp,8(a0)
  LOAD  x3,3*REGBYTES(a0)
  dc:	00c52183          	lw	gp,12(a0)
  LOAD  x4,4*REGBYTES(a0)
  e0:	01052203          	lw	tp,16(a0)
  LOAD  x5,5*REGBYTES(a0)
  e4:	01452283          	lw	t0,20(a0)
  LOAD  x6,6*REGBYTES(a0)
  e8:	01852303          	lw	t1,24(a0)
  LOAD  x7,7*REGBYTES(a0)
  ec:	01c52383          	lw	t2,28(a0)
  LOAD  x8,8*REGBYTES(a0)
  f0:	02052403          	lw	s0,32(a0)
  LOAD  x9,9*REGBYTES(a0)
  f4:	02452483          	lw	s1,36(a0)
  LOAD  x11,11*REGBYTES(a0)
  f8:	02c52583          	lw	a1,44(a0)
  LOAD  x12,12*REGBYTES(a0)
  fc:	03052603          	lw	a2,48(a0)
  LOAD  x13,13*REGBYTES(a0)
 100:	03452683          	lw	a3,52(a0)
  LOAD  x14,14*REGBYTES(a0)
 104:	03852703          	lw	a4,56(a0)
  LOAD  x15,15*REGBYTES(a0)
 108:	03c52783          	lw	a5,60(a0)
  LOAD  x16,16*REGBYTES(a0)
 10c:	04052803          	lw	a6,64(a0)
  LOAD  x17,17*REGBYTES(a0)
 110:	04452883          	lw	a7,68(a0)
  LOAD  x18,18*REGBYTES(a0)
 114:	04852903          	lw	s2,72(a0)
  LOAD  x19,19*REGBYTES(a0)
 118:	04c52983          	lw	s3,76(a0)
  LOAD  x20,20*REGBYTES(a0)
 11c:	05052a03          	lw	s4,80(a0)
  LOAD  x21,21*REGBYTES(a0)
 120:	05452a83          	lw	s5,84(a0)
  LOAD  x22,22*REGBYTES(a0)
 124:	05852b03          	lw	s6,88(a0)
  LOAD  x23,23*REGBYTES(a0)
 128:	05c52b83          	lw	s7,92(a0)
  LOAD  x24,24*REGBYTES(a0)
 12c:	06052c03          	lw	s8,96(a0)
  LOAD  x25,25*REGBYTES(a0)
 130:	06452c83          	lw	s9,100(a0)
  LOAD  x26,26*REGBYTES(a0)
 134:	06852d03          	lw	s10,104(a0)
  LOAD  x27,27*REGBYTES(a0)
 138:	06c52d83          	lw	s11,108(a0)
  LOAD  x28,28*REGBYTES(a0)
 13c:	07052e03          	lw	t3,112(a0)
  LOAD  x29,29*REGBYTES(a0)
 140:	07452e83          	lw	t4,116(a0)
  LOAD  x30,30*REGBYTES(a0)
 144:	07852f03          	lw	t5,120(a0)
  LOAD  x31,31*REGBYTES(a0)
 148:	07c52f83          	lw	t6,124(a0)
  LOAD  a0,10*REGBYTES(a0)
 14c:	02852503          	lw	a0,40(a0)
  sret
 150:	10200073          	sret

00000154 <trap_entry>:

  .global  trap_entry
  .align 2
trap_entry:
  csrrw sp, sscratch, sp
 154:	14011173          	csrrw	sp,sscratch,sp

  # save gprs
  STORE  x1,1*REGBYTES(sp)
 158:	00112223          	sw	ra,4(sp)
  STORE  x3,3*REGBYTES(sp)
 15c:	00312623          	sw	gp,12(sp)
  STORE  x4,4*REGBYTES(sp)
 160:	00412823          	sw	tp,16(sp)
  STORE  x5,5*REGBYTES(sp)
 164:	00512a23          	sw	t0,20(sp)
  STORE  x6,6*REGBYTES(sp)
 168:	00612c23          	sw	t1,24(sp)
  STORE  x7,7*REGBYTES(sp)
 16c:	00712e23          	sw	t2,28(sp)
  STORE  x8,8*REGBYTES(sp)
 170:	02812023          	sw	s0,32(sp)
  STORE  x9,9*REGBYTES(sp)
 174:	02912223          	sw	s1,36(sp)
  STORE  x10,10*REGBYTES(sp)
 178:	02a12423          	sw	a0,40(sp)
  STORE  x11,11*REGBYTES(sp)
 17c:	02b12623          	sw	a1,44(sp)
  STORE  x12,12*REGBYTES(sp)
 180:	02c12823          	sw	a2,48(sp)
  STORE  x13,13*REGBYTES(sp)
 184:	02d12a23          	sw	a3,52(sp)
  STORE  x14,14*REGBYTES(sp)
 188:	02e12c23          	sw	a4,56(sp)
  STORE  x15,15*REGBYTES(sp)
 18c:	02f12e23          	sw	a5,60(sp)
  STORE  x16,16*REGBYTES(sp)
 190:	05012023          	sw	a6,64(sp)
  STORE  x17,17*REGBYTES(sp)
 194:	05112223          	sw	a7,68(sp)
  STORE  x18,18*REGBYTES(sp)
 198:	05212423          	sw	s2,72(sp)
  STORE  x19,19*REGBYTES(sp)
 19c:	05312623          	sw	s3,76(sp)
  STORE  x20,20*REGBYTES(sp)
 1a0:	05412823          	sw	s4,80(sp)
  STORE  x21,21*REGBYTES(sp)
 1a4:	05512a23          	sw	s5,84(sp)
  STORE  x22,22*REGBYTES(sp)
 1a8:	05612c23          	sw	s6,88(sp)
  STORE  x23,23*REGBYTES(sp)
 1ac:	05712e23          	sw	s7,92(sp)
  STORE  x24,24*REGBYTES(sp)
 1b0:	07812023          	sw	s8,96(sp)
  STORE  x25,25*REGBYTES(sp)
 1b4:	07912223          	sw	s9,100(sp)
  STORE  x26,26*REGBYTES(sp)
 1b8:	07a12423          	sw	s10,104(sp)
  STORE  x27,27*REGBYTES(sp)
 1bc:	07b12623          	sw	s11,108(sp)
  STORE  x28,28*REGBYTES(sp)
 1c0:	07c12823          	sw	t3,112(sp)
  STORE  x29,29*REGBYTES(sp)
 1c4:	07d12a23          	sw	t4,116(sp)
  STORE  x30,30*REGBYTES(sp)
 1c8:	07e12c23          	sw	t5,120(sp)
  STORE  x31,31*REGBYTES(sp)
 1cc:	07f12e23          	sw	t6,124(sp)

  csrrw  t0,sscratch,sp
 1d0:	140112f3          	csrrw	t0,sscratch,sp
  STORE  t0,2*REGBYTES(sp)
 1d4:	00512423          	sw	t0,8(sp)

  # get sr, epc, badvaddr, cause
  csrr   t0,sstatus
 1d8:	100022f3          	csrr	t0,sstatus
  STORE  t0,32*REGBYTES(sp)
 1dc:	08512023          	sw	t0,128(sp)
  csrr   t0,sepc
 1e0:	141022f3          	csrr	t0,sepc
  STORE  t0,33*REGBYTES(sp)
 1e4:	08512223          	sw	t0,132(sp)
  csrr   t0,stval
 1e8:	143022f3          	csrr	t0,stval
  STORE  t0,34*REGBYTES(sp)
 1ec:	08512423          	sw	t0,136(sp)
  csrr   t0,scause
 1f0:	142022f3          	csrr	t0,scause
  STORE  t0,35*REGBYTES(sp)
 1f4:	08512623          	sw	t0,140(sp)

  move  a0, sp
 1f8:	00010513          	mv	a0,sp
  j handle_trap
 1fc:	5640206f          	j	2760 <handle_trap>

Disassembly of section .text:

00002000 <memcpy>:
#include <stdint.h>
#include <ctype.h>

void* memcpy(void* dest, const void* src, size_t len)
{
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    2000:	00b567b3          	or	a5,a0,a1
    2004:	00c7e7b3          	or	a5,a5,a2
    2008:	0037f793          	and	a5,a5,3
    while (d < (uintptr_t*)(dest + len))
      *d++ = *s++;
  } else {
    const char* s = src;
    char *d = dest;
    while (d < (char*)(dest + len))
    200c:	00c506b3          	add	a3,a0,a2
  if ((((uintptr_t)dest | (uintptr_t)src | len) & (sizeof(uintptr_t)-1)) == 0) {
    2010:	02078463          	beqz	a5,2038 <memcpy+0x38>
    while (d < (char*)(dest + len))
    2014:	00c58633          	add	a2,a1,a2
    char *d = dest;
    2018:	00050793          	mv	a5,a0
    while (d < (char*)(dest + len))
    201c:	02d57e63          	bgeu	a0,a3,2058 <memcpy+0x58>
      *d++ = *s++;
    2020:	0005c703          	lbu	a4,0(a1)
    2024:	00158593          	add	a1,a1,1
    2028:	00178793          	add	a5,a5,1
    202c:	fee78fa3          	sb	a4,-1(a5)
    while (d < (char*)(dest + len))
    2030:	fec598e3          	bne	a1,a2,2020 <memcpy+0x20>
  }
  return dest;
}
    2034:	00008067          	ret
    while (d < (uintptr_t*)(dest + len))
    2038:	fed57ee3          	bgeu	a0,a3,2034 <memcpy+0x34>
    uintptr_t *d = dest;
    203c:	00050793          	mv	a5,a0
      *d++ = *s++;
    2040:	0005a703          	lw	a4,0(a1)
    2044:	00478793          	add	a5,a5,4
    2048:	00458593          	add	a1,a1,4
    204c:	fee7ae23          	sw	a4,-4(a5)
    while (d < (uintptr_t*)(dest + len))
    2050:	fed7e8e3          	bltu	a5,a3,2040 <memcpy+0x40>
    2054:	00008067          	ret
    2058:	00008067          	ret

0000205c <memset>:

void* memset(void* dest, int byte, size_t len)
{
    205c:	ff010113          	add	sp,sp,-16
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    2060:	00c567b3          	or	a5,a0,a2
{
    2064:	00812423          	sw	s0,8(sp)
    2068:	00112623          	sw	ra,12(sp)
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    206c:	0037f793          	and	a5,a5,3
{
    2070:	00050413          	mv	s0,a0
    uintptr_t *d = dest;
    while (d < (uintptr_t*)(dest + len))
      *d++ = word;
  } else {
    char *d = dest;
    while (d < (char*)(dest + len))
    2074:	00c50733          	add	a4,a0,a2
  if ((((uintptr_t)dest | len) & (sizeof(uintptr_t)-1)) == 0) {
    2078:	02078263          	beqz	a5,209c <memset+0x40>
    while (d < (char*)(dest + len))
    207c:	00e57663          	bgeu	a0,a4,2088 <memset+0x2c>
      *d++ = byte;
    2080:	0ff5f593          	zext.b	a1,a1
    2084:	fd9ff0ef          	jal	205c <memset>
  }
  return dest;
}
    2088:	00c12083          	lw	ra,12(sp)
    208c:	00040513          	mv	a0,s0
    2090:	00812403          	lw	s0,8(sp)
    2094:	01010113          	add	sp,sp,16
    2098:	00008067          	ret
    uintptr_t word = byte & 0xFF;
    209c:	0ff5f593          	zext.b	a1,a1
    20a0:	00859693          	sll	a3,a1,0x8
    20a4:	00b686b3          	add	a3,a3,a1
    20a8:	01069793          	sll	a5,a3,0x10
    20ac:	00f686b3          	add	a3,a3,a5
    while (d < (uintptr_t*)(dest + len))
    20b0:	fce57ce3          	bgeu	a0,a4,2088 <memset+0x2c>
    uintptr_t *d = dest;
    20b4:	00050793          	mv	a5,a0
      *d++ = word;
    20b8:	00478793          	add	a5,a5,4
    20bc:	fed7ae23          	sw	a3,-4(a5)
    while (d < (uintptr_t*)(dest + len))
    20c0:	fee7ece3          	bltu	a5,a4,20b8 <memset+0x5c>
}
    20c4:	00c12083          	lw	ra,12(sp)
    20c8:	00040513          	mv	a0,s0
    20cc:	00812403          	lw	s0,8(sp)
    20d0:	01010113          	add	sp,sp,16
    20d4:	00008067          	ret

000020d8 <strlen>:

size_t strlen(const char *s)
{
  const char *p = s;
  while (*p)
    20d8:	00054783          	lbu	a5,0(a0)
    20dc:	00078e63          	beqz	a5,20f8 <strlen+0x20>
  const char *p = s;
    20e0:	00050793          	mv	a5,a0
  while (*p)
    20e4:	0017c703          	lbu	a4,1(a5)
    p++;
    20e8:	00178793          	add	a5,a5,1
  while (*p)
    20ec:	fe071ce3          	bnez	a4,20e4 <strlen+0xc>
  return p - s;
    20f0:	40a78533          	sub	a0,a5,a0
    20f4:	00008067          	ret
  while (*p)
    20f8:	00000513          	li	a0,0
}
    20fc:	00008067          	ret

00002100 <strcmp>:
int strcmp(const char* s1, const char* s2)
{
  unsigned char c1, c2;

  do {
    c1 = *s1++;
    2100:	00054783          	lbu	a5,0(a0)
    c2 = *s2++;
    2104:	00158593          	add	a1,a1,1
    c1 = *s1++;
    2108:	00150513          	add	a0,a0,1
    c2 = *s2++;
    210c:	fff5c703          	lbu	a4,-1(a1)
  } while (c1 != 0 && c1 == c2);
    2110:	00078863          	beqz	a5,2120 <strcmp+0x20>
    2114:	fee786e3          	beq	a5,a4,2100 <strcmp>

  return c1 - c2;
}
    2118:	40e78533          	sub	a0,a5,a4
    211c:	00008067          	ret
    2120:	00000793          	li	a5,0
    2124:	ff5ff06f          	j	2118 <strcmp+0x18>

00002128 <memcmp>:

int memcmp(const void* s1, const void* s2, size_t n)
{
  if ((((uintptr_t)s1 | (uintptr_t)s2) & (sizeof(uintptr_t)-1)) == 0) {
    2128:	00b567b3          	or	a5,a0,a1
    212c:	0037f793          	and	a5,a5,3
    2130:	02079e63          	bnez	a5,216c <memcmp+0x44>
    const uintptr_t* u1 = s1;
    const uintptr_t* u2 = s2;
    const uintptr_t* end = u1 + (n / sizeof(uintptr_t));
    2134:	ffc67813          	and	a6,a2,-4
    2138:	01050833          	add	a6,a0,a6
    while (u1 < end) {
    213c:	03057863          	bgeu	a0,a6,216c <memcmp+0x44>
    const uintptr_t* u1 = s1;
    2140:	00050793          	mv	a5,a0
    2144:	0100006f          	j	2154 <memcmp+0x2c>
      if (*u1 != *u2)
        break;
      u1++;
    2148:	00478793          	add	a5,a5,4
      u2++;
    214c:	00458593          	add	a1,a1,4
    while (u1 < end) {
    2150:	0107f863          	bgeu	a5,a6,2160 <memcmp+0x38>
      if (*u1 != *u2)
    2154:	0007a683          	lw	a3,0(a5)
    2158:	0005a703          	lw	a4,0(a1)
    215c:	fee686e3          	beq	a3,a4,2148 <memcmp+0x20>
    }
    n -= (const void*)u1 - s1;
    2160:	40a78533          	sub	a0,a5,a0
    2164:	40a60633          	sub	a2,a2,a0
      u1++;
    2168:	00078513          	mv	a0,a5
    s1 = u1;
    s2 = u2;
    216c:	00c58633          	add	a2,a1,a2
    2170:	0140006f          	j	2184 <memcmp+0x5c>
  }

  while (n--) {
    unsigned char c1 = *(const unsigned char*)s1++;
    unsigned char c2 = *(const unsigned char*)s2++;
    2174:	0005c703          	lbu	a4,0(a1)
    unsigned char c1 = *(const unsigned char*)s1++;
    2178:	fff54783          	lbu	a5,-1(a0)
    unsigned char c2 = *(const unsigned char*)s2++;
    217c:	00158593          	add	a1,a1,1
    if (c1 != c2)
    2180:	00e79a63          	bne	a5,a4,2194 <memcmp+0x6c>
    unsigned char c1 = *(const unsigned char*)s1++;
    2184:	00150513          	add	a0,a0,1
  while (n--) {
    2188:	fec596e3          	bne	a1,a2,2174 <memcmp+0x4c>
      return c1 - c2;
  }

  return 0;
    218c:	00000513          	li	a0,0
}
    2190:	00008067          	ret
      return c1 - c2;
    2194:	40e78533          	sub	a0,a5,a4
    2198:	00008067          	ret

0000219c <strcpy>:

char* strcpy(char* dest, const char* src)
{
  char* d = dest;
    219c:	00050793          	mv	a5,a0
  while ((*d++ = *src++))
    21a0:	0005c703          	lbu	a4,0(a1)
    21a4:	00178793          	add	a5,a5,1
    21a8:	00158593          	add	a1,a1,1
    21ac:	fee78fa3          	sb	a4,-1(a5)
    21b0:	fe0718e3          	bnez	a4,21a0 <strcpy+0x4>
    ;
  return dest;
}
    21b4:	00008067          	ret

000021b8 <atol>:
long atol(const char* str)
{
  long res = 0;
  int sign = 0;

  while (*str == ' ')
    21b8:	00054703          	lbu	a4,0(a0)
    21bc:	02000693          	li	a3,32
{
    21c0:	00050793          	mv	a5,a0
  while (*str == ' ')
    21c4:	00d71863          	bne	a4,a3,21d4 <atol+0x1c>
    21c8:	0017c703          	lbu	a4,1(a5)
    str++;
    21cc:	00178793          	add	a5,a5,1
  while (*str == ' ')
    21d0:	fed70ce3          	beq	a4,a3,21c8 <atol+0x10>

  if (*str == '-' || *str == '+') {
    21d4:	02d00693          	li	a3,45
    21d8:	06d70063          	beq	a4,a3,2238 <atol+0x80>
    21dc:	02b00693          	li	a3,43
    21e0:	04d70063          	beq	a4,a3,2220 <atol+0x68>
    sign = *str == '-';
    str++;
  }

  while (*str) {
    21e4:	0007c683          	lbu	a3,0(a5)
  int sign = 0;
    21e8:	00000593          	li	a1,0
  while (*str) {
    21ec:	04068263          	beqz	a3,2230 <atol+0x78>
    sign = *str == '-';
    21f0:	00000513          	li	a0,0
    res *= 10;
    res += *str++ - '0';
    21f4:	00178793          	add	a5,a5,1
    res *= 10;
    21f8:	00251713          	sll	a4,a0,0x2
    res += *str++ - '0';
    21fc:	fd068613          	add	a2,a3,-48
  while (*str) {
    2200:	0007c683          	lbu	a3,0(a5)
    res *= 10;
    2204:	00a70733          	add	a4,a4,a0
    2208:	00171713          	sll	a4,a4,0x1
    res += *str++ - '0';
    220c:	00e60533          	add	a0,a2,a4
  while (*str) {
    2210:	fe0692e3          	bnez	a3,21f4 <atol+0x3c>
  }

  return sign ? -res : res;
    2214:	02058063          	beqz	a1,2234 <atol+0x7c>
    2218:	40a00533          	neg	a0,a0
    221c:	00008067          	ret
  while (*str) {
    2220:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    2224:	00000593          	li	a1,0
    str++;
    2228:	00178793          	add	a5,a5,1
  while (*str) {
    222c:	fc0692e3          	bnez	a3,21f0 <atol+0x38>
    2230:	00000513          	li	a0,0
}
    2234:	00008067          	ret
  while (*str) {
    2238:	0017c683          	lbu	a3,1(a5)
    sign = *str == '-';
    223c:	00100593          	li	a1,1
    str++;
    2240:	00178793          	add	a5,a5,1
  while (*str) {
    2244:	fa0696e3          	bnez	a3,21f0 <atol+0x38>
    2248:	00000513          	li	a0,0
    224c:	fe9ff06f          	j	2234 <atol+0x7c>

00002250 <cputstring>:
  do_tohost(0x0101000000000000 | (unsigned char)x);
}

static void cputstring(const char* s)
{
  while (*s)
    2250:	00054583          	lbu	a1,0(a0)
    2254:	06058063          	beqz	a1,22b4 <cputstring+0x64>
    2258:	fffff697          	auipc	a3,0xfffff
    225c:	da868693          	add	a3,a3,-600 # 1000 <tohost>
    2260:	fffff617          	auipc	a2,0xfffff
    2264:	de060613          	add	a2,a2,-544 # 1040 <fromhost>
  while (tohost)
    2268:	0006a703          	lw	a4,0(a3)
    226c:	0046a783          	lw	a5,4(a3)
  do_tohost(0x0101000000000000 | (unsigned char)x);
    2270:	00058813          	mv	a6,a1
    cputchar(*s++);
    2274:	00150513          	add	a0,a0,1
  while (tohost)
    2278:	00f76733          	or	a4,a4,a5
  do_tohost(0x0101000000000000 | (unsigned char)x);
    227c:	010108b7          	lui	a7,0x1010
  while (tohost)
    2280:	02070263          	beqz	a4,22a4 <cputstring+0x54>
    fromhost = 0;
    2284:	00000713          	li	a4,0
    2288:	00e62023          	sw	a4,0(a2)
    228c:	00000793          	li	a5,0
    2290:	00f62223          	sw	a5,4(a2)
  while (tohost)
    2294:	0006a703          	lw	a4,0(a3)
    2298:	0046a783          	lw	a5,4(a3)
    229c:	00f76733          	or	a4,a4,a5
    22a0:	fe0712e3          	bnez	a4,2284 <cputstring+0x34>
  tohost = tohost_value;
    22a4:	0106a023          	sw	a6,0(a3)
    22a8:	0116a223          	sw	a7,4(a3)
  while (*s)
    22ac:	00054583          	lbu	a1,0(a0)
    22b0:	fa059ce3          	bnez	a1,2268 <cputstring+0x18>
}
    22b4:	00008067          	ret

000022b8 <terminate>:
  while (tohost)
    22b8:	fffff697          	auipc	a3,0xfffff
    22bc:	d4868693          	add	a3,a3,-696 # 1000 <tohost>
    22c0:	0006a703          	lw	a4,0(a3)
    22c4:	0046a783          	lw	a5,4(a3)

static void terminate(int code)
{
  do_tohost(code);
    22c8:	00050813          	mv	a6,a0
    22cc:	41f55893          	sra	a7,a0,0x1f
  while (tohost)
    22d0:	00f76733          	or	a4,a4,a5
    22d4:	02070663          	beqz	a4,2300 <terminate+0x48>
    22d8:	fffff617          	auipc	a2,0xfffff
    22dc:	d6860613          	add	a2,a2,-664 # 1040 <fromhost>
    fromhost = 0;
    22e0:	00000713          	li	a4,0
    22e4:	00e62023          	sw	a4,0(a2)
    22e8:	00000793          	li	a5,0
    22ec:	00f62223          	sw	a5,4(a2)
  while (tohost)
    22f0:	0006a703          	lw	a4,0(a3)
    22f4:	0046a783          	lw	a5,4(a3)
    22f8:	00f76733          	or	a4,a4,a5
    22fc:	fe0712e3          	bnez	a4,22e0 <terminate+0x28>
  tohost = tohost_value;
    2300:	0106a023          	sw	a6,0(a3)
    2304:	0116a223          	sw	a7,4(a3)
  while (1);
    2308:	0000006f          	j	2308 <terminate+0x50>

0000230c <wtf>:
}

void wtf()
{
    230c:	ff010113          	add	sp,sp,-16
  terminate(841);
    2310:	34900513          	li	a0,841
{
    2314:	00112623          	sw	ra,12(sp)
  terminate(841);
    2318:	fa1ff0ef          	jal	22b8 <terminate>

0000231c <printhex>:
freelist_t user_mapping[MAX_TEST_PAGES];
freelist_t freelist_nodes[MAX_TEST_PAGES];
freelist_t *freelist_head, *freelist_tail;

void printhex(uint64_t x)
{
    231c:	fe010113          	add	sp,sp,-32
    2320:	00c10613          	add	a2,sp,12
    2324:	01b10713          	add	a4,sp,27
  char str[17];
  for (int i = 0; i < 16; i++)
  {
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    2328:	00900313          	li	t1,9
    232c:	0080006f          	j	2334 <printhex+0x18>
  for (int i = 0; i < 16; i++)
    2330:	00078713          	mv	a4,a5
    str[15-i] = (x & 0xF) + ((x & 0xF) < 10 ? '0' : 'a'-10);
    2334:	00f57793          	and	a5,a0,15
    2338:	00f337b3          	sltu	a5,t1,a5
    233c:	40f007b3          	neg	a5,a5
    2340:	0277f793          	and	a5,a5,39
    2344:	00f57693          	and	a3,a0,15
    2348:	03078793          	add	a5,a5,48
    234c:	00f687b3          	add	a5,a3,a5
    2350:	00f70023          	sb	a5,0(a4)
    x >>= 4;
    2354:	01c59693          	sll	a3,a1,0x1c
    2358:	00455513          	srl	a0,a0,0x4
  for (int i = 0; i < 16; i++)
    235c:	fff70793          	add	a5,a4,-1
    x >>= 4;
    2360:	00a6e533          	or	a0,a3,a0
    2364:	0045d593          	srl	a1,a1,0x4
  for (int i = 0; i < 16; i++)
    2368:	fce614e3          	bne	a2,a4,2330 <printhex+0x14>
  while (*s)
    236c:	00c14503          	lbu	a0,12(sp)
  }
  str[16] = 0;
    2370:	00010e23          	sb	zero,28(sp)
  while (*s)
    2374:	06050263          	beqz	a0,23d8 <printhex+0xbc>
    2378:	00060593          	mv	a1,a2
    237c:	fffff697          	auipc	a3,0xfffff
    2380:	c8468693          	add	a3,a3,-892 # 1000 <tohost>
    2384:	fffff617          	auipc	a2,0xfffff
    2388:	cbc60613          	add	a2,a2,-836 # 1040 <fromhost>
  while (tohost)
    238c:	0006a703          	lw	a4,0(a3)
    2390:	0046a783          	lw	a5,4(a3)
  do_tohost(0x0101000000000000 | (unsigned char)x);
    2394:	00050813          	mv	a6,a0
    cputchar(*s++);
    2398:	00158593          	add	a1,a1,1
  while (tohost)
    239c:	00f76733          	or	a4,a4,a5
  do_tohost(0x0101000000000000 | (unsigned char)x);
    23a0:	010108b7          	lui	a7,0x1010
  while (tohost)
    23a4:	02070263          	beqz	a4,23c8 <printhex+0xac>
    fromhost = 0;
    23a8:	00000713          	li	a4,0
    23ac:	00e62023          	sw	a4,0(a2)
    23b0:	00000793          	li	a5,0
    23b4:	00f62223          	sw	a5,4(a2)
  while (tohost)
    23b8:	0006a703          	lw	a4,0(a3)
    23bc:	0046a783          	lw	a5,4(a3)
    23c0:	00f76733          	or	a4,a4,a5
    23c4:	fe0712e3          	bnez	a4,23a8 <printhex+0x8c>
  while (*s)
    23c8:	0005c503          	lbu	a0,0(a1)
  tohost = tohost_value;
    23cc:	0106a023          	sw	a6,0(a3)
    23d0:	0116a223          	sw	a7,4(a3)
  while (*s)
    23d4:	fa051ce3          	bnez	a0,238c <printhex+0x70>

  cputstring(str);
}
    23d8:	02010113          	add	sp,sp,32
    23dc:	00008067          	ret

000023e0 <evict>:

/* static */ void evict(unsigned long addr)
{
    23e0:	fe010113          	add	sp,sp,-32
  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    23e4:	fffff737          	lui	a4,0xfffff
{
    23e8:	00112e23          	sw	ra,28(sp)
    23ec:	00812c23          	sw	s0,24(sp)
    23f0:	00912a23          	sw	s1,20(sp)
    23f4:	01212823          	sw	s2,16(sp)
    23f8:	01312623          	sw	s3,12(sp)
    23fc:	01412423          	sw	s4,8(sp)
    2400:	01512223          	sw	s5,4(sp)
  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    2404:	00e506b3          	add	a3,a0,a4
    2408:	0003e7b7          	lui	a5,0x3e
    240c:	10f6f263          	bgeu	a3,a5,2510 <evict+0x130>
  addr = addr/PGSIZE*PGSIZE;

  freelist_t* node = &user_mapping[addr/PGSIZE];
    2410:	00c55793          	srl	a5,a0,0xc
  if (node->addr)
    2414:	00002917          	auipc	s2,0x2
    2418:	bec90913          	add	s2,s2,-1044 # 4000 <user_mapping>
    241c:	00379993          	sll	s3,a5,0x3
    2420:	013906b3          	add	a3,s2,s3
    2424:	0006a683          	lw	a3,0(a3)
    2428:	0a068a63          	beqz	a3,24dc <evict+0xfc>
  {
    // check accessed and dirty bits
    assert(user_llpt[addr/PGSIZE] & PTE_A);
    242c:	40078793          	add	a5,a5,1024 # 3e400 <freelist_head+0x373fc>
    2430:	00279793          	sll	a5,a5,0x2
    2434:	00003697          	auipc	a3,0x3
    2438:	bcc68693          	add	a3,a3,-1076 # 5000 <pt>
    243c:	00f687b3          	add	a5,a3,a5
    2440:	0007aa83          	lw	s5,0(a5)
    2444:	040af793          	and	a5,s5,64
    2448:	0c078e63          	beqz	a5,2524 <evict+0x144>
  addr = addr/PGSIZE*PGSIZE;
    244c:	00e57433          	and	s0,a0,a4
    uintptr_t sstatus = set_csr(sstatus, SSTATUS_SUM);
    2450:	00040a37          	lui	s4,0x40
    2454:	100a2a73          	csrrs	s4,sstatus,s4
    if (memcmp((void*)addr, uva2kva(addr), PGSIZE)) {
    2458:	ffc005b7          	lui	a1,0xffc00
    245c:	00b404b3          	add	s1,s0,a1
    2460:	00001637          	lui	a2,0x1
    2464:	00048593          	mv	a1,s1
    2468:	00040513          	mv	a0,s0
    246c:	cbdff0ef          	jal	2128 <memcmp>
    2470:	04050463          	beqz	a0,24b8 <evict+0xd8>
      assert(user_llpt[addr/PGSIZE] & PTE_D);
    2474:	080afa93          	and	s5,s5,128
    2478:	0c0a8063          	beqz	s5,2538 <evict+0x158>
      memcpy(uva2kva(addr), (void*)addr, PGSIZE);
    247c:	00001837          	lui	a6,0x1
    2480:	00040513          	mv	a0,s0
    2484:	00048593          	mv	a1,s1
    2488:	01040833          	add	a6,s0,a6
    248c:	00052603          	lw	a2,0(a0)
    2490:	00452683          	lw	a3,4(a0)
    2494:	00852703          	lw	a4,8(a0)
    2498:	00c52783          	lw	a5,12(a0)
    249c:	00c5a023          	sw	a2,0(a1) # ffc00000 <freelist_head+0xffbf8ffc>
    24a0:	00d5a223          	sw	a3,4(a1)
    24a4:	00e5a423          	sw	a4,8(a1)
    24a8:	00f5a623          	sw	a5,12(a1)
    24ac:	01050513          	add	a0,a0,16
    24b0:	01058593          	add	a1,a1,16
    24b4:	fd051ce3          	bne	a0,a6,248c <evict+0xac>
  freelist_t* node = &user_mapping[addr/PGSIZE];
    24b8:	01390933          	add	s2,s2,s3
    }
    write_csr(sstatus, sstatus);
    24bc:	100a1073          	csrw	sstatus,s4

    user_mapping[addr/PGSIZE].addr = 0;

    if (freelist_tail == 0)
    24c0:	00005797          	auipc	a5,0x5
    24c4:	b4078793          	add	a5,a5,-1216 # 7000 <freelist_tail>
    24c8:	0007a703          	lw	a4,0(a5)
    user_mapping[addr/PGSIZE].addr = 0;
    24cc:	00092023          	sw	zero,0(s2)
    if (freelist_tail == 0)
    24d0:	02070863          	beqz	a4,2500 <evict+0x120>
      freelist_head = freelist_tail = node;
    else
    {
      freelist_tail->next = node;
    24d4:	01272223          	sw	s2,4(a4) # fffff004 <freelist_head+0xffff8000>
      freelist_tail = node;
    24d8:	0127a023          	sw	s2,0(a5)
    }
  }
}
    24dc:	01c12083          	lw	ra,28(sp)
    24e0:	01812403          	lw	s0,24(sp)
    24e4:	01412483          	lw	s1,20(sp)
    24e8:	01012903          	lw	s2,16(sp)
    24ec:	00c12983          	lw	s3,12(sp)
    24f0:	00812a03          	lw	s4,8(sp)
    24f4:	00412a83          	lw	s5,4(sp)
    24f8:	02010113          	add	sp,sp,32
    24fc:	00008067          	ret
      freelist_head = freelist_tail = node;
    2500:	0127a023          	sw	s2,0(a5)
    2504:	00005797          	auipc	a5,0x5
    2508:	b127a023          	sw	s2,-1280(a5) # 7004 <freelist_head>
    250c:	fd1ff06f          	j	24dc <evict+0xfc>
  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    2510:	00001517          	auipc	a0,0x1
    2514:	b8450513          	add	a0,a0,-1148 # 3094 <pass+0xc>
    2518:	d39ff0ef          	jal	2250 <cputstring>
    251c:	00300513          	li	a0,3
    2520:	d99ff0ef          	jal	22b8 <terminate>
    assert(user_llpt[addr/PGSIZE] & PTE_A);
    2524:	00001517          	auipc	a0,0x1
    2528:	bb450513          	add	a0,a0,-1100 # 30d8 <pass+0x50>
    252c:	d25ff0ef          	jal	2250 <cputstring>
    2530:	00300513          	li	a0,3
    2534:	d85ff0ef          	jal	22b8 <terminate>
      assert(user_llpt[addr/PGSIZE] & PTE_D);
    2538:	00001517          	auipc	a0,0x1
    253c:	bd450513          	add	a0,a0,-1068 # 310c <pass+0x84>
    2540:	d11ff0ef          	jal	2250 <cputstring>
    2544:	00300513          	li	a0,3
    2548:	d71ff0ef          	jal	22b8 <terminate>

0000254c <handle_fault>:

extern int pf_filter(uintptr_t addr, uintptr_t *pte, int *copy);
extern int trap_filter(trapframe_t *tf);

void handle_fault(uintptr_t addr, uintptr_t cause)
{
    254c:	fd010113          	add	sp,sp,-48
  uintptr_t filter_encodings = 0;
  int copy_page = 1;
    2550:	00100793          	li	a5,1

  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    2554:	fffff737          	lui	a4,0xfffff
  int copy_page = 1;
    2558:	00f12623          	sw	a5,12(sp)
{
    255c:	02112623          	sw	ra,44(sp)
    2560:	02812423          	sw	s0,40(sp)
    2564:	02912223          	sw	s1,36(sp)
    2568:	03212023          	sw	s2,32(sp)
    256c:	01312e23          	sw	s3,28(sp)
    2570:	01412c23          	sw	s4,24(sp)
    2574:	01512a23          	sw	s5,20(sp)
  uintptr_t filter_encodings = 0;
    2578:	00012423          	sw	zero,8(sp)
  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    257c:	00e506b3          	add	a3,a0,a4
    2580:	0003e7b7          	lui	a5,0x3e
    2584:	18f6f663          	bgeu	a3,a5,2710 <handle_fault+0x1c4>
  addr = addr/PGSIZE*PGSIZE;

  if (user_llpt[addr/PGSIZE]) {
    2588:	00c55993          	srl	s3,a0,0xc
    258c:	40098493          	add	s1,s3,1024
    2590:	00003917          	auipc	s2,0x3
    2594:	a7090913          	add	s2,s2,-1424 # 5000 <pt>
    2598:	00249793          	sll	a5,s1,0x2
    259c:	00f907b3          	add	a5,s2,a5
    25a0:	0007a783          	lw	a5,0(a5) # 3e000 <freelist_head+0x36ffc>
  addr = addr/PGSIZE*PGSIZE;
    25a4:	00e57433          	and	s0,a0,a4
  if (user_llpt[addr/PGSIZE]) {
    25a8:	10079663          	bnez	a5,26b4 <handle_fault+0x168>
    }
    flush_page(addr);
    return;
  }

  freelist_t* node = freelist_head;
    25ac:	00005717          	auipc	a4,0x5
    25b0:	a5870713          	add	a4,a4,-1448 # 7004 <freelist_head>
    25b4:	00072a03          	lw	s4,0(a4)
  assert(node);
    25b8:	180a0063          	beqz	s4,2738 <handle_fault+0x1ec>
  freelist_head = node->next;
    25bc:	004a2783          	lw	a5,4(s4) # 40004 <freelist_head+0x39000>
  if (freelist_head == freelist_tail)
    25c0:	00005697          	auipc	a3,0x5
    25c4:	a406a683          	lw	a3,-1472(a3) # 7000 <freelist_tail>
  freelist_head = node->next;
    25c8:	00f72023          	sw	a5,0(a4)
  if (freelist_head == freelist_tail)
    25cc:	12d78c63          	beq	a5,a3,2704 <handle_fault+0x1b8>
    freelist_tail = 0;

  uintptr_t new_pte = (node->addr >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V | PTE_U | PTE_R | PTE_W | PTE_X;

  if (pf_filter(addr, &filter_encodings, &copy_page)) {
    25d0:	00c10613          	add	a2,sp,12
    25d4:	00810593          	add	a1,sp,8
    25d8:	00040513          	mv	a0,s0
  uintptr_t new_pte = (node->addr >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V | PTE_U | PTE_R | PTE_W | PTE_X;
    25dc:	000a2a83          	lw	s5,0(s4)
  if (pf_filter(addr, &filter_encodings, &copy_page)) {
    25e0:	4f4000ef          	jal	2ad4 <pf_filter>
    25e4:	10051063          	bnez	a0,26e4 <handle_fault+0x198>
  uintptr_t new_pte = (node->addr >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V | PTE_U | PTE_R | PTE_W | PTE_X;
    25e8:	00cad693          	srl	a3,s5,0xc
    25ec:	00a69693          	sll	a3,a3,0xa
    25f0:	01f6e693          	or	a3,a3,31
      new_pte = (node->addr >> PGSHIFT << PTE_PPN_SHIFT) | filter_encodings;
  }

  user_llpt[addr/PGSIZE] = new_pte | PTE_A | PTE_D;
    25f4:	00249793          	sll	a5,s1,0x2
    25f8:	00f907b3          	add	a5,s2,a5
    25fc:	0c06e713          	or	a4,a3,192
    2600:	00e7a023          	sw	a4,0(a5)
  flush_page(addr);
    2604:	12040073          	sfence.vma	s0

  assert(user_mapping[addr/PGSIZE].addr == 0);
    2608:	00002797          	auipc	a5,0x2
    260c:	9f878793          	add	a5,a5,-1544 # 4000 <user_mapping>
    2610:	00399993          	sll	s3,s3,0x3
    2614:	013787b3          	add	a5,a5,s3
    2618:	0007a703          	lw	a4,0(a5)
    261c:	12071863          	bnez	a4,274c <handle_fault+0x200>
  user_mapping[addr/PGSIZE] = *node;
    2620:	000a2703          	lw	a4,0(s4)

  uintptr_t sstatus = set_csr(sstatus, SSTATUS_SUM);
    2624:	000405b7          	lui	a1,0x40
  user_mapping[addr/PGSIZE] = *node;
    2628:	00e7a023          	sw	a4,0(a5)
    262c:	004a2703          	lw	a4,4(s4)
    2630:	00e7a223          	sw	a4,4(a5)
  uintptr_t sstatus = set_csr(sstatus, SSTATUS_SUM);
    2634:	1005a5f3          	csrrs	a1,sstatus,a1
  memcpy((void*)addr, uva2kva(addr), PGSIZE);
    2638:	ffc007b7          	lui	a5,0xffc00
    263c:	00f407b3          	add	a5,s0,a5
    2640:	00001637          	lui	a2,0x1
    2644:	00040713          	mv	a4,s0
    2648:	00c78633          	add	a2,a5,a2
    264c:	0007a303          	lw	t1,0(a5) # ffc00000 <freelist_head+0xffbf8ffc>
    2650:	0047a883          	lw	a7,4(a5)
    2654:	0087a803          	lw	a6,8(a5)
    2658:	00c7a503          	lw	a0,12(a5)
    265c:	00672023          	sw	t1,0(a4)
    2660:	01172223          	sw	a7,4(a4)
    2664:	01072423          	sw	a6,8(a4)
    2668:	00a72623          	sw	a0,12(a4)
    266c:	01078793          	add	a5,a5,16
    2670:	01070713          	add	a4,a4,16
    2674:	fcc79ce3          	bne	a5,a2,264c <handle_fault+0x100>
  write_csr(sstatus, sstatus);
    2678:	10059073          	csrw	sstatus,a1

  user_llpt[addr/PGSIZE] = new_pte;
    267c:	00249793          	sll	a5,s1,0x2
    2680:	00f904b3          	add	s1,s2,a5
    2684:	00d4a023          	sw	a3,0(s1)
  flush_page(addr);
    2688:	12040073          	sfence.vma	s0

  asm volatile ("fence.i");
    268c:	0000100f          	fence.i
}
    2690:	02c12083          	lw	ra,44(sp)
    2694:	02812403          	lw	s0,40(sp)
    2698:	02412483          	lw	s1,36(sp)
    269c:	02012903          	lw	s2,32(sp)
    26a0:	01c12983          	lw	s3,28(sp)
    26a4:	01812a03          	lw	s4,24(sp)
    26a8:	01412a83          	lw	s5,20(sp)
    26ac:	03010113          	add	sp,sp,48
    26b0:	00008067          	ret
    if (!(user_llpt[addr/PGSIZE] & PTE_A)) {
    26b4:	0407f713          	and	a4,a5,64
    26b8:	04070263          	beqz	a4,26fc <handle_fault+0x1b0>
      assert(!(user_llpt[addr/PGSIZE] & PTE_D) && cause == CAUSE_STORE_PAGE_FAULT);
    26bc:	0807f713          	and	a4,a5,128
    26c0:	06071263          	bnez	a4,2724 <handle_fault+0x1d8>
    26c4:	00f00713          	li	a4,15
      user_llpt[addr/PGSIZE] |= PTE_D;
    26c8:	0807e793          	or	a5,a5,128
      assert(!(user_llpt[addr/PGSIZE] & PTE_D) && cause == CAUSE_STORE_PAGE_FAULT);
    26cc:	04e59c63          	bne	a1,a4,2724 <handle_fault+0x1d8>
      user_llpt[addr/PGSIZE] |= PTE_A;
    26d0:	00249493          	sll	s1,s1,0x2
    26d4:	009904b3          	add	s1,s2,s1
    26d8:	00f4a023          	sw	a5,0(s1)
    flush_page(addr);
    26dc:	12040073          	sfence.vma	s0
    return;
    26e0:	fb1ff06f          	j	2690 <handle_fault+0x144>
      new_pte = (node->addr >> PGSHIFT << PTE_PPN_SHIFT) | filter_encodings;
    26e4:	000a2683          	lw	a3,0(s4)
    26e8:	00812783          	lw	a5,8(sp)
    26ec:	00c6d693          	srl	a3,a3,0xc
    26f0:	00a69693          	sll	a3,a3,0xa
    26f4:	00f6e6b3          	or	a3,a3,a5
    26f8:	efdff06f          	j	25f4 <handle_fault+0xa8>
      user_llpt[addr/PGSIZE] |= PTE_A;
    26fc:	0407e793          	or	a5,a5,64
    2700:	fd1ff06f          	j	26d0 <handle_fault+0x184>
    freelist_tail = 0;
    2704:	00005797          	auipc	a5,0x5
    2708:	8e07ae23          	sw	zero,-1796(a5) # 7000 <freelist_tail>
    270c:	ec5ff06f          	j	25d0 <handle_fault+0x84>
  assert(addr >= PGSIZE && addr < MAX_TEST_PAGES * PGSIZE);
    2710:	00001517          	auipc	a0,0x1
    2714:	98450513          	add	a0,a0,-1660 # 3094 <pass+0xc>
    2718:	b39ff0ef          	jal	2250 <cputstring>
    271c:	00300513          	li	a0,3
    2720:	b99ff0ef          	jal	22b8 <terminate>
      assert(!(user_llpt[addr/PGSIZE] & PTE_D) && cause == CAUSE_STORE_PAGE_FAULT);
    2724:	00001517          	auipc	a0,0x1
    2728:	a1c50513          	add	a0,a0,-1508 # 3140 <pass+0xb8>
    272c:	b25ff0ef          	jal	2250 <cputstring>
    2730:	00300513          	li	a0,3
    2734:	b85ff0ef          	jal	22b8 <terminate>
  assert(node);
    2738:	00001517          	auipc	a0,0x1
    273c:	a5050513          	add	a0,a0,-1456 # 3188 <pass+0x100>
    2740:	b11ff0ef          	jal	2250 <cputstring>
    2744:	00300513          	li	a0,3
    2748:	b71ff0ef          	jal	22b8 <terminate>
  assert(user_mapping[addr/PGSIZE].addr == 0);
    274c:	00001517          	auipc	a0,0x1
    2750:	a5450513          	add	a0,a0,-1452 # 31a0 <pass+0x118>
    2754:	afdff0ef          	jal	2250 <cputstring>
    2758:	00300513          	li	a0,3
    275c:	b5dff0ef          	jal	22b8 <terminate>

00002760 <handle_trap>:

void handle_trap(trapframe_t* tf)
{
    2760:	fe010113          	add	sp,sp,-32
    2764:	00812c23          	sw	s0,24(sp)
    2768:	00112e23          	sw	ra,28(sp)
    276c:	00912a23          	sw	s1,20(sp)
    2770:	01212823          	sw	s2,16(sp)
    2774:	01312623          	sw	s3,12(sp)
    2778:	00050413          	mv	s0,a0
  if (trap_filter(tf)) {
    277c:	350000ef          	jal	2acc <trap_filter>
    2780:	0e051263          	bnez	a0,2864 <handle_trap+0x104>
    pop_tf(tf);
  }

  if (tf->cause == CAUSE_USER_ECALL)
    2784:	08c42583          	lw	a1,140(s0)
    2788:	00800793          	li	a5,8
    278c:	10f58063          	beq	a1,a5,288c <handle_trap+0x12c>
    for (long i = 1; i < MAX_TEST_PAGES; i++)
      evict(i*PGSIZE);

    terminate(n);
  }
  else if (tf->cause == CAUSE_ILLEGAL_INSTRUCTION)
    2790:	00200793          	li	a5,2
    2794:	04f58063          	beq	a1,a5,27d4 <handle_trap+0x74>
      terminate(1); // FP test on non-FP hardware.  "succeed."
    else
      assert(!"illegal instruction");
    tf->epc += 4;
  }
  else if (tf->cause == CAUSE_FETCH_PAGE_FAULT || tf->cause == CAUSE_LOAD_PAGE_FAULT || tf->cause == CAUSE_STORE_PAGE_FAULT)
    2798:	ff458793          	add	a5,a1,-12 # 3fff4 <freelist_head+0x38ff0>
    279c:	00100713          	li	a4,1
    27a0:	00f77663          	bgeu	a4,a5,27ac <handle_trap+0x4c>
    27a4:	00f00793          	li	a5,15
    27a8:	10f59663          	bne	a1,a5,28b4 <handle_trap+0x154>
    handle_fault(tf->badvaddr, tf->cause);
    27ac:	08842503          	lw	a0,136(s0)
    27b0:	d9dff0ef          	jal	254c <handle_fault>
  else
    assert(!"unexpected exception");

  pop_tf(tf);
    27b4:	00040513          	mv	a0,s0

  return;
}
    27b8:	01812403          	lw	s0,24(sp)
    27bc:	01c12083          	lw	ra,28(sp)
    27c0:	01412483          	lw	s1,20(sp)
    27c4:	01012903          	lw	s2,16(sp)
    27c8:	00c12983          	lw	s3,12(sp)
    27cc:	02010113          	add	sp,sp,32
  pop_tf(tf);
    27d0:	8fdfd06f          	j	cc <pop_tf>
    assert(tf->epc % 4 == 0);
    27d4:	08442703          	lw	a4,132(s0)
    27d8:	00377793          	and	a5,a4,3
    27dc:	08079e63          	bnez	a5,2878 <handle_trap+0x118>
    asm ("jal %0, 1f; fssr x0; 1:" : "=r"(fssr));
    27e0:	008007ef          	jal	a5,27e8 <handle_trap+0x88>
    27e4:	00301073          	fscsr	zero
    if (*(int*)tf->epc == *fssr)
    27e8:	00072703          	lw	a4,0(a4)
    27ec:	0007a783          	lw	a5,0(a5)
    27f0:	08f70063          	beq	a4,a5,2870 <handle_trap+0x110>
  while (*s)
    27f4:	04100513          	li	a0,65
    27f8:	00001597          	auipc	a1,0x1
    27fc:	9e458593          	add	a1,a1,-1564 # 31dc <pass+0x154>
    2800:	fffff697          	auipc	a3,0xfffff
    2804:	80068693          	add	a3,a3,-2048 # 1000 <tohost>
    2808:	fffff617          	auipc	a2,0xfffff
    280c:	83860613          	add	a2,a2,-1992 # 1040 <fromhost>
  while (tohost)
    2810:	0006a703          	lw	a4,0(a3)
    2814:	0046a783          	lw	a5,4(a3)
  do_tohost(0x0101000000000000 | (unsigned char)x);
    2818:	00050913          	mv	s2,a0
    cputchar(*s++);
    281c:	00158593          	add	a1,a1,1
  while (tohost)
    2820:	00f76733          	or	a4,a4,a5
  do_tohost(0x0101000000000000 | (unsigned char)x);
    2824:	010109b7          	lui	s3,0x1010
  while (tohost)
    2828:	02070263          	beqz	a4,284c <handle_trap+0xec>
    fromhost = 0;
    282c:	00000793          	li	a5,0
    2830:	00f62023          	sw	a5,0(a2)
    2834:	00000813          	li	a6,0
    2838:	01062223          	sw	a6,4(a2)
  while (tohost)
    283c:	0006a703          	lw	a4,0(a3)
    2840:	0046a783          	lw	a5,4(a3)
    2844:	00f76733          	or	a4,a4,a5
    2848:	fe0712e3          	bnez	a4,282c <handle_trap+0xcc>
  while (*s)
    284c:	0005c503          	lbu	a0,0(a1)
  tohost = tohost_value;
    2850:	0126a023          	sw	s2,0(a3)
    2854:	0136a223          	sw	s3,4(a3)
  while (*s)
    2858:	fa051ce3          	bnez	a0,2810 <handle_trap+0xb0>
    assert(!"unexpected exception");
    285c:	00300513          	li	a0,3
    2860:	a59ff0ef          	jal	22b8 <terminate>
    pop_tf(tf);
    2864:	00040513          	mv	a0,s0
    2868:	865fd0ef          	jal	cc <pop_tf>
    286c:	f19ff06f          	j	2784 <handle_trap+0x24>
      terminate(1); // FP test on non-FP hardware.  "succeed."
    2870:	00100513          	li	a0,1
    2874:	a45ff0ef          	jal	22b8 <terminate>
    assert(tf->epc % 4 == 0);
    2878:	00001517          	auipc	a0,0x1
    287c:	99050513          	add	a0,a0,-1648 # 3208 <pass+0x180>
    2880:	9d1ff0ef          	jal	2250 <cputstring>
    2884:	00300513          	li	a0,3
    2888:	a31ff0ef          	jal	22b8 <terminate>
    int n = tf->gpr[10];
    288c:	02842903          	lw	s2,40(s0)
    for (long i = 1; i < MAX_TEST_PAGES; i++)
    2890:	000014b7          	lui	s1,0x1
    int n = tf->gpr[10];
    2894:	00001437          	lui	s0,0x1
    for (long i = 1; i < MAX_TEST_PAGES; i++)
    2898:	0003f9b7          	lui	s3,0x3f
      evict(i*PGSIZE);
    289c:	00040513          	mv	a0,s0
    for (long i = 1; i < MAX_TEST_PAGES; i++)
    28a0:	00940433          	add	s0,s0,s1
      evict(i*PGSIZE);
    28a4:	b3dff0ef          	jal	23e0 <evict>
    for (long i = 1; i < MAX_TEST_PAGES; i++)
    28a8:	ff341ae3          	bne	s0,s3,289c <handle_trap+0x13c>
    terminate(n);
    28ac:	00090513          	mv	a0,s2
    28b0:	a09ff0ef          	jal	22b8 <terminate>
    assert(!"unexpected exception");
    28b4:	00001517          	auipc	a0,0x1
    28b8:	97850513          	add	a0,a0,-1672 # 322c <pass+0x1a4>
    28bc:	995ff0ef          	jal	2250 <cputstring>
    28c0:	f9dff06f          	j	285c <handle_trap+0xfc>

000028c4 <vm_boot>:
    random = lfsr63(random);
  }
}

void vm_boot(uintptr_t test_addr)
{
    28c4:	f6010113          	add	sp,sp,-160
    28c8:	08112e23          	sw	ra,156(sp)
    28cc:	08812c23          	sw	s0,152(sp)
    28d0:	08912a23          	sw	s1,148(sp)
    28d4:	09212823          	sw	s2,144(sp)
  uint64_t random = ENTROPY;
  if (read_csr(mhartid) > 0)
    28d8:	f1402973          	csrr	s2,mhartid
    28dc:	18091063          	bnez	s2,2a5c <vm_boot+0x198>

  _Static_assert(SIZEOF_TRAPFRAME_T == sizeof(trapframe_t), "???");

  freelist_head = 0;
  freelist_tail = 0;
  memset(pt, 0, sizeof(pt));
    28e0:	00002497          	auipc	s1,0x2
    28e4:	72048493          	add	s1,s1,1824 # 5000 <pt>
    28e8:	00050413          	mv	s0,a0
    28ec:	00002637          	lui	a2,0x2
    28f0:	00000593          	li	a1,0
    28f4:	00048513          	mv	a0,s1
  freelist_head = 0;
    28f8:	00004797          	auipc	a5,0x4
    28fc:	7007a623          	sw	zero,1804(a5) # 7004 <freelist_head>
  freelist_tail = 0;
    2900:	00004797          	auipc	a5,0x4
    2904:	7007a023          	sw	zero,1792(a5) # 7000 <freelist_tail>
  memset(pt, 0, sizeof(pt));
    2908:	f54ff0ef          	jal	205c <memset>
  memset(user_mapping, 0, sizeof(user_mapping));
    290c:	1f800613          	li	a2,504
    2910:	00000593          	li	a1,0
    2914:	00001517          	auipc	a0,0x1
    2918:	6ec50513          	add	a0,a0,1772 # 4000 <user_mapping>
    291c:	f40ff0ef          	jal	205c <memset>
  memset(freelist_nodes, 0, sizeof(freelist_nodes));
    2920:	1f800613          	li	a2,504
    2924:	00000593          	li	a1,0
    2928:	00002517          	auipc	a0,0x2
    292c:	8d050513          	add	a0,a0,-1840 # 41f8 <freelist_nodes>
    2930:	f2cff0ef          	jal	205c <memset>

#if (MAX_TEST_PAGES > PTES_PER_PT) || (DRAM_BASE % MEGAPAGE_SIZE) != 0
# error
#endif
  // map user to lowermost megapage
  l1pt[0] = ((pte_t)user_l2pt >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V;
    2934:	00003717          	auipc	a4,0x3
    2938:	6cc70713          	add	a4,a4,1740 # 6000 <pt+0x1000>
    293c:	00c75793          	srl	a5,a4,0xc
    2940:	00a79793          	sll	a5,a5,0xa
    2944:	0017e793          	or	a5,a5,1
    2948:	00f4a023          	sw	a5,0(s1)
#elif SATP_MODE_CHOICE == SATP_MODE_SV39
  // l1pt[PTES_PER_PT-1] = ((pte_t)kernel_l2pt >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V;
  // kernel_l2pt[PTES_PER_PT-1] = (DRAM_BASE/RISCV_PGSIZE << PTE_PPN_SHIFT) | PTE_V | PTE_R | PTE_W | PTE_X | PTE_A | PTE_D;
  // user_l2pt[0] = ((pte_t)user_llpt >> PGSHIFT << PTE_PPN_SHIFT) | PTE_V;
#elif SATP_MODE_CHOICE == SATP_MODE_SV32
  l1pt[PTES_PER_PT-1] = (DRAM_BASE/RISCV_PGSIZE << PTE_PPN_SHIFT) | PTE_V | PTE_R | PTE_W | PTE_X | PTE_A | PTE_D;
    294c:	0cf00793          	li	a5,207
    2950:	fef72e23          	sw	a5,-4(a4)
#else
# error
#endif

  flush_page(0);
    2954:	12090073          	sfence.vma	s2

  uintptr_t vm_choice = SATP_MODE_CHOICE;
  uintptr_t satp_value = ((uintptr_t)l1pt >> PGSHIFT)
    2958:	80000737          	lui	a4,0x80000
    295c:	00c4d793          	srl	a5,s1,0xc
    2960:	00e7e7b3          	or	a5,a5,a4
                        | (vm_choice * (SATP_MODE & ~(SATP_MODE<<1)));
  write_csr(satp, satp_value);
    2964:	18079073          	csrw	satp,a5
  if (read_csr(satp) != satp_value)
    2968:	18002773          	csrr	a4,satp
    296c:	14e79463          	bne	a5,a4,2ab4 <vm_boot+0x1f0>
                "1: csrw mtvec, t0"
                : : "r" (pmpc), "r" (pmpa) : "t0");
  */

  // set up supervisor trap handling
  write_csr(stvec, pa2kva(trap_entry));
    2970:	ffbfd797          	auipc	a5,0xffbfd
    2974:	7e478793          	add	a5,a5,2020 # ffc00154 <freelist_head+0xffbf9150>
    2978:	10579073          	csrw	stvec,a5
  write_csr(sscratch, pa2kva(read_csr(mscratch)));
    297c:	340027f3          	csrr	a5,mscratch
    2980:	ffc00537          	lui	a0,0xffc00
    2984:	00a787b3          	add	a5,a5,a0
    2988:	14079073          	csrw	sscratch,a5
  write_csr(medeleg,
    298c:	0000b7b7          	lui	a5,0xb
    2990:	10078793          	add	a5,a5,256 # b100 <freelist_head+0x40fc>
    2994:	30279073          	csrw	medeleg,a5
    (1 << CAUSE_USER_ECALL) |
    (1 << CAUSE_FETCH_PAGE_FAULT) |
    (1 << CAUSE_LOAD_PAGE_FAULT) |
    (1 << CAUSE_STORE_PAGE_FAULT));
  // FPU on; accelerator on; vector unit on
  write_csr(mstatus, MSTATUS_FS | MSTATUS_XS | MSTATUS_VS);
    2998:	0001e7b7          	lui	a5,0x1e
    299c:	60078793          	add	a5,a5,1536 # 1e600 <freelist_head+0x175fc>
    29a0:	30079073          	csrw	mstatus,a5
  write_csr(mie, 0);
    29a4:	30405073          	csrw	mie,0

  random = 1 + (random % MAX_TEST_PAGES);
  freelist_head = pa2kva((void*)&freelist_nodes[0]);
    29a8:	ffc02797          	auipc	a5,0xffc02
    29ac:	85078793          	add	a5,a5,-1968 # ffc041f8 <freelist_head+0xffbfd1f4>
    29b0:	00004717          	auipc	a4,0x4
    29b4:	64f72a23          	sw	a5,1620(a4) # 7004 <freelist_head>
  freelist_tail = pa2kva(&freelist_nodes[MAX_TEST_PAGES-1]);
    29b8:	ffc02797          	auipc	a5,0xffc02
    29bc:	a3078793          	add	a5,a5,-1488 # ffc043e8 <freelist_head+0xffbfd3e4>
    29c0:	00004717          	auipc	a4,0x4
    29c4:	64f72023          	sw	a5,1600(a4) # 7000 <freelist_tail>
  for (long i = 0; i < MAX_TEST_PAGES; i++)
    29c8:	00002717          	auipc	a4,0x2
    29cc:	83070713          	add	a4,a4,-2000 # 41f8 <freelist_nodes>
    29d0:	00002897          	auipc	a7,0x2
    29d4:	a2088893          	add	a7,a7,-1504 # 43f0 <freelist_nodes+0x1f8>
  random = 1 + (random % MAX_TEST_PAGES);
    29d8:	02700793          	li	a5,39
    29dc:	00000593          	li	a1,0
  {
    freelist_nodes[i].addr = DRAM_BASE + (MAX_TEST_PAGES + random)*PGSIZE;
    freelist_nodes[i].next = pa2kva(&freelist_nodes[i+1]);
    29e0:	00850513          	add	a0,a0,8 # ffc00008 <freelist_head+0xffbf9004>
    random = LFSR_NEXT(random);
    29e4:	01f59613          	sll	a2,a1,0x1f
    29e8:	0017d693          	srl	a3,a5,0x1
    29ec:	00d666b3          	or	a3,a2,a3
    freelist_nodes[i].addr = DRAM_BASE + (MAX_TEST_PAGES + random)*PGSIZE;
    29f0:	03f78613          	add	a2,a5,63
    random = LFSR_NEXT(random);
    29f4:	00f6c7b3          	xor	a5,a3,a5
    freelist_nodes[i].next = pa2kva(&freelist_nodes[i+1]);
    29f8:	00a70833          	add	a6,a4,a0
    freelist_nodes[i].addr = DRAM_BASE + (MAX_TEST_PAGES + random)*PGSIZE;
    29fc:	00c61613          	sll	a2,a2,0xc
    random = LFSR_NEXT(random);
    2a00:	00579793          	sll	a5,a5,0x5
    freelist_nodes[i].addr = DRAM_BASE + (MAX_TEST_PAGES + random)*PGSIZE;
    2a04:	00c72023          	sw	a2,0(a4)
    freelist_nodes[i].next = pa2kva(&freelist_nodes[i+1]);
    2a08:	01072223          	sw	a6,4(a4)
    random = LFSR_NEXT(random);
    2a0c:	0207f793          	and	a5,a5,32
  for (long i = 0; i < MAX_TEST_PAGES; i++)
    2a10:	00870713          	add	a4,a4,8
    random = LFSR_NEXT(random);
    2a14:	00f6e7b3          	or	a5,a3,a5
    2a18:	0015d593          	srl	a1,a1,0x1
  for (long i = 0; i < MAX_TEST_PAGES; i++)
    2a1c:	fce894e3          	bne	a7,a4,29e4 <vm_boot+0x120>
  }
  freelist_nodes[MAX_TEST_PAGES-1].next = 0;

  trapframe_t tf;
  memset(&tf, 0, sizeof(tf));
    2a20:	09000613          	li	a2,144
    2a24:	00000593          	li	a1,0
    2a28:	00010513          	mv	a0,sp
  freelist_nodes[MAX_TEST_PAGES-1].next = 0;
    2a2c:	00002797          	auipc	a5,0x2
    2a30:	9c07a023          	sw	zero,-1600(a5) # 43ec <freelist_nodes+0x1f4>
  memset(&tf, 0, sizeof(tf));
    2a34:	e28ff0ef          	jal	205c <memset>
  tf.epc = test_addr - DRAM_BASE;
  pop_tf(&tf);
    2a38:	00010513          	mv	a0,sp
  tf.epc = test_addr - DRAM_BASE;
    2a3c:	08812223          	sw	s0,132(sp)
  pop_tf(&tf);
    2a40:	e8cfd0ef          	jal	cc <pop_tf>
}
    2a44:	09c12083          	lw	ra,156(sp)
    2a48:	09812403          	lw	s0,152(sp)
    2a4c:	09412483          	lw	s1,148(sp)
    2a50:	09012903          	lw	s2,144(sp)
    2a54:	0a010113          	add	sp,sp,160
    2a58:	00008067          	ret
  uint64_t random = ENTROPY;
    2a5c:	001567b7          	lui	a5,0x156
    uintptr_t paddr = DRAM_BASE + ((random % (2 * (MAX_TEST_PAGES + 1) * PGSIZE)) & -4);
    2a60:	00080637          	lui	a2,0x80
  uint64_t random = ENTROPY;
    2a64:	5b478793          	add	a5,a5,1460 # 1565b4 <freelist_head+0x14f5b0>
    2a68:	00000713          	li	a4,0
    uintptr_t paddr = DRAM_BASE + ((random % (2 * (MAX_TEST_PAGES + 1) * PGSIZE)) & -4);
    2a6c:	ffc60613          	add	a2,a2,-4 # 7fffc <freelist_head+0x78ff8>
  return (x >> 1) | (bit << 62);
    2a70:	40000537          	lui	a0,0x40000
    2a74:	02c0006f          	j	2aa0 <vm_boot+0x1dc>
      asm volatile ("amoadd.w zero, zero, (%0)" :: "r"(paddr));
    2a78:	0005a02f          	amoadd.w	zero,zero,(a1)
  uint64_t bit = (x ^ (x >> 1)) & 1;
    2a7c:	01f71593          	sll	a1,a4,0x1f
    2a80:	0017d693          	srl	a3,a5,0x1
    2a84:	00d5e6b3          	or	a3,a1,a3
    2a88:	00d7c7b3          	xor	a5,a5,a3
  return (x >> 1) | (bit << 62);
    2a8c:	01e79793          	sll	a5,a5,0x1e
    2a90:	00f575b3          	and	a1,a0,a5
  uint64_t bit = (x ^ (x >> 1)) & 1;
    2a94:	00175713          	srl	a4,a4,0x1
  return (x >> 1) | (bit << 62);
    2a98:	00068793          	mv	a5,a3
    2a9c:	00e5e733          	or	a4,a1,a4
    if (random & 1) // perform a no-op write
    2aa0:	0017f693          	and	a3,a5,1
    uintptr_t paddr = DRAM_BASE + ((random % (2 * (MAX_TEST_PAGES + 1) * PGSIZE)) & -4);
    2aa4:	00c7f5b3          	and	a1,a5,a2
    if (random & 1) // perform a no-op write
    2aa8:	fc0698e3          	bnez	a3,2a78 <vm_boot+0x1b4>
      asm volatile ("lw zero, (%0)" :: "r"(paddr));
    2aac:	0005a003          	lw	zero,0(a1)
    2ab0:	fcdff06f          	j	2a7c <vm_boot+0x1b8>
    assert(!"unsupported satp mode");
    2ab4:	00000517          	auipc	a0,0x0
    2ab8:	7a450513          	add	a0,a0,1956 # 3258 <pass+0x1d0>
    2abc:	f94ff0ef          	jal	2250 <cputstring>
    2ac0:	00300513          	li	a0,3
    2ac4:	ff4ff0ef          	jal	22b8 <terminate>

00002ac8 <extra_boot>:

#include "riscv_test.h"
#include "test_macros.h"

RVTEST_RV64U
RVTEST_CODE_BEGIN
    2ac8:	00008067          	ret

00002acc <trap_filter>:
    2acc:	00000513          	li	a0,0
    2ad0:	00008067          	ret

00002ad4 <pf_filter>:
    2ad4:	00000513          	li	a0,0
    2ad8:	00008067          	ret

00002adc <userstart>:

  #-------------------------------------------------------------
  # Arithmetic tests
  #-------------------------------------------------------------

  TEST_RR_OP( 2,  sra, 0xffffffff80000000, 0xffffffff80000000, 0  );
    2adc:	00200193          	li	gp,2
    2ae0:	800000b7          	lui	ra,0x80000
    2ae4:	00000113          	li	sp,0
    2ae8:	4020d733          	sra	a4,ra,sp
    2aec:	800003b7          	lui	t2,0x80000
    2af0:	58771463          	bne	a4,t2,3078 <fail>

00002af4 <test_3>:
  TEST_RR_OP( 3,  sra, 0xffffffffc0000000, 0xffffffff80000000, 1  );
    2af4:	00300193          	li	gp,3
    2af8:	800000b7          	lui	ra,0x80000
    2afc:	00100113          	li	sp,1
    2b00:	4020d733          	sra	a4,ra,sp
    2b04:	c00003b7          	lui	t2,0xc0000
    2b08:	56771863          	bne	a4,t2,3078 <fail>

00002b0c <test_4>:
  TEST_RR_OP( 4,  sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2b0c:	00400193          	li	gp,4
    2b10:	800000b7          	lui	ra,0x80000
    2b14:	00700113          	li	sp,7
    2b18:	4020d733          	sra	a4,ra,sp
    2b1c:	ff0003b7          	lui	t2,0xff000
    2b20:	54771c63          	bne	a4,t2,3078 <fail>

00002b24 <test_5>:
  TEST_RR_OP( 5,  sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2b24:	00500193          	li	gp,5
    2b28:	800000b7          	lui	ra,0x80000
    2b2c:	00e00113          	li	sp,14
    2b30:	4020d733          	sra	a4,ra,sp
    2b34:	fffe03b7          	lui	t2,0xfffe0
    2b38:	54771063          	bne	a4,t2,3078 <fail>

00002b3c <test_6>:
  TEST_RR_OP( 6,  sra, 0xffffffffffffffff, 0xffffffff80000001, 31 );
    2b3c:	00600193          	li	gp,6
    2b40:	800000b7          	lui	ra,0x80000
    2b44:	00108093          	add	ra,ra,1 # 80000001 <freelist_head+0x7fff8ffd>
    2b48:	01f00113          	li	sp,31
    2b4c:	4020d733          	sra	a4,ra,sp
    2b50:	fff00393          	li	t2,-1
    2b54:	52771263          	bne	a4,t2,3078 <fail>

00002b58 <test_7>:

  TEST_RR_OP( 7,  sra, 0x000000007fffffff, 0x000000007fffffff, 0  );
    2b58:	00700193          	li	gp,7
    2b5c:	800000b7          	lui	ra,0x80000
    2b60:	fff08093          	add	ra,ra,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2b64:	00000113          	li	sp,0
    2b68:	4020d733          	sra	a4,ra,sp
    2b6c:	800003b7          	lui	t2,0x80000
    2b70:	fff38393          	add	t2,t2,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2b74:	50771263          	bne	a4,t2,3078 <fail>

00002b78 <test_8>:
  TEST_RR_OP( 8,  sra, 0x000000003fffffff, 0x000000007fffffff, 1  );
    2b78:	00800193          	li	gp,8
    2b7c:	800000b7          	lui	ra,0x80000
    2b80:	fff08093          	add	ra,ra,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2b84:	00100113          	li	sp,1
    2b88:	4020d733          	sra	a4,ra,sp
    2b8c:	400003b7          	lui	t2,0x40000
    2b90:	fff38393          	add	t2,t2,-1 # 3fffffff <freelist_head+0x3fff8ffb>
    2b94:	4e771263          	bne	a4,t2,3078 <fail>

00002b98 <test_9>:
  TEST_RR_OP( 9,  sra, 0x0000000000ffffff, 0x000000007fffffff, 7  );
    2b98:	00900193          	li	gp,9
    2b9c:	800000b7          	lui	ra,0x80000
    2ba0:	fff08093          	add	ra,ra,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2ba4:	00700113          	li	sp,7
    2ba8:	4020d733          	sra	a4,ra,sp
    2bac:	010003b7          	lui	t2,0x1000
    2bb0:	fff38393          	add	t2,t2,-1 # ffffff <freelist_head+0xff8ffb>
    2bb4:	4c771263          	bne	a4,t2,3078 <fail>

00002bb8 <test_10>:
  TEST_RR_OP( 10, sra, 0x000000000001ffff, 0x000000007fffffff, 14 );
    2bb8:	00a00193          	li	gp,10
    2bbc:	800000b7          	lui	ra,0x80000
    2bc0:	fff08093          	add	ra,ra,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2bc4:	00e00113          	li	sp,14
    2bc8:	4020d733          	sra	a4,ra,sp
    2bcc:	000203b7          	lui	t2,0x20
    2bd0:	fff38393          	add	t2,t2,-1 # 1ffff <freelist_head+0x18ffb>
    2bd4:	4a771263          	bne	a4,t2,3078 <fail>

00002bd8 <test_11>:
  TEST_RR_OP( 11, sra, 0x0000000000000000, 0x000000007fffffff, 31 );
    2bd8:	00b00193          	li	gp,11
    2bdc:	800000b7          	lui	ra,0x80000
    2be0:	fff08093          	add	ra,ra,-1 # 7fffffff <freelist_head+0x7fff8ffb>
    2be4:	01f00113          	li	sp,31
    2be8:	4020d733          	sra	a4,ra,sp
    2bec:	00000393          	li	t2,0
    2bf0:	48771463          	bne	a4,t2,3078 <fail>

00002bf4 <test_12>:

  TEST_RR_OP( 12, sra, 0xffffffff81818181, 0xffffffff81818181, 0  );
    2bf4:	00c00193          	li	gp,12
    2bf8:	818180b7          	lui	ra,0x81818
    2bfc:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c00:	00000113          	li	sp,0
    2c04:	4020d733          	sra	a4,ra,sp
    2c08:	818183b7          	lui	t2,0x81818
    2c0c:	18138393          	add	t2,t2,385 # 81818181 <freelist_head+0x8181117d>
    2c10:	46771463          	bne	a4,t2,3078 <fail>

00002c14 <test_13>:
  TEST_RR_OP( 13, sra, 0xffffffffc0c0c0c0, 0xffffffff81818181, 1  );
    2c14:	00d00193          	li	gp,13
    2c18:	818180b7          	lui	ra,0x81818
    2c1c:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c20:	00100113          	li	sp,1
    2c24:	4020d733          	sra	a4,ra,sp
    2c28:	c0c0c3b7          	lui	t2,0xc0c0c
    2c2c:	0c038393          	add	t2,t2,192 # c0c0c0c0 <freelist_head+0xc0c050bc>
    2c30:	44771463          	bne	a4,t2,3078 <fail>

00002c34 <test_14>:
  TEST_RR_OP( 14, sra, 0xffffffffff030303, 0xffffffff81818181, 7  );
    2c34:	00e00193          	li	gp,14
    2c38:	818180b7          	lui	ra,0x81818
    2c3c:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c40:	00700113          	li	sp,7
    2c44:	4020d733          	sra	a4,ra,sp
    2c48:	ff0303b7          	lui	t2,0xff030
    2c4c:	30338393          	add	t2,t2,771 # ff030303 <freelist_head+0xff0292ff>
    2c50:	42771463          	bne	a4,t2,3078 <fail>

00002c54 <test_15>:
  TEST_RR_OP( 15, sra, 0xfffffffffffe0606, 0xffffffff81818181, 14 );
    2c54:	00f00193          	li	gp,15
    2c58:	818180b7          	lui	ra,0x81818
    2c5c:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c60:	00e00113          	li	sp,14
    2c64:	4020d733          	sra	a4,ra,sp
    2c68:	fffe03b7          	lui	t2,0xfffe0
    2c6c:	60638393          	add	t2,t2,1542 # fffe0606 <freelist_head+0xfffd9602>
    2c70:	40771463          	bne	a4,t2,3078 <fail>

00002c74 <test_16>:
  TEST_RR_OP( 16, sra, 0xffffffffffffffff, 0xffffffff81818181, 31 );
    2c74:	01000193          	li	gp,16
    2c78:	818180b7          	lui	ra,0x81818
    2c7c:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c80:	01f00113          	li	sp,31
    2c84:	4020d733          	sra	a4,ra,sp
    2c88:	fff00393          	li	t2,-1
    2c8c:	3e771663          	bne	a4,t2,3078 <fail>

00002c90 <test_17>:

  # Verify that shifts only use bottom six(rv64) or five(rv32) bits

  TEST_RR_OP( 17, sra, 0xffffffff81818181, 0xffffffff81818181, 0xffffffffffffffc0 );
    2c90:	01100193          	li	gp,17
    2c94:	818180b7          	lui	ra,0x81818
    2c98:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2c9c:	fc000113          	li	sp,-64
    2ca0:	4020d733          	sra	a4,ra,sp
    2ca4:	818183b7          	lui	t2,0x81818
    2ca8:	18138393          	add	t2,t2,385 # 81818181 <freelist_head+0x8181117d>
    2cac:	3c771663          	bne	a4,t2,3078 <fail>

00002cb0 <test_18>:
  TEST_RR_OP( 18, sra, 0xffffffffc0c0c0c0, 0xffffffff81818181, 0xffffffffffffffc1 );
    2cb0:	01200193          	li	gp,18
    2cb4:	818180b7          	lui	ra,0x81818
    2cb8:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2cbc:	fc100113          	li	sp,-63
    2cc0:	4020d733          	sra	a4,ra,sp
    2cc4:	c0c0c3b7          	lui	t2,0xc0c0c
    2cc8:	0c038393          	add	t2,t2,192 # c0c0c0c0 <freelist_head+0xc0c050bc>
    2ccc:	3a771663          	bne	a4,t2,3078 <fail>

00002cd0 <test_19>:
  TEST_RR_OP( 19, sra, 0xffffffffff030303, 0xffffffff81818181, 0xffffffffffffffc7 );
    2cd0:	01300193          	li	gp,19
    2cd4:	818180b7          	lui	ra,0x81818
    2cd8:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2cdc:	fc700113          	li	sp,-57
    2ce0:	4020d733          	sra	a4,ra,sp
    2ce4:	ff0303b7          	lui	t2,0xff030
    2ce8:	30338393          	add	t2,t2,771 # ff030303 <freelist_head+0xff0292ff>
    2cec:	38771663          	bne	a4,t2,3078 <fail>

00002cf0 <test_20>:
  TEST_RR_OP( 20, sra, 0xfffffffffffe0606, 0xffffffff81818181, 0xffffffffffffffce );
    2cf0:	01400193          	li	gp,20
    2cf4:	818180b7          	lui	ra,0x81818
    2cf8:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2cfc:	fce00113          	li	sp,-50
    2d00:	4020d733          	sra	a4,ra,sp
    2d04:	fffe03b7          	lui	t2,0xfffe0
    2d08:	60638393          	add	t2,t2,1542 # fffe0606 <freelist_head+0xfffd9602>
    2d0c:	36771663          	bne	a4,t2,3078 <fail>

00002d10 <test_21>:
  TEST_RR_OP( 21, sra, 0xffffffffffffffff, 0xffffffff81818181, 0xffffffffffffffff );
    2d10:	01500193          	li	gp,21
    2d14:	818180b7          	lui	ra,0x81818
    2d18:	18108093          	add	ra,ra,385 # 81818181 <freelist_head+0x8181117d>
    2d1c:	fff00113          	li	sp,-1
    2d20:	4020d733          	sra	a4,ra,sp
    2d24:	fff00393          	li	t2,-1
    2d28:	34771863          	bne	a4,t2,3078 <fail>

00002d2c <test_22>:

  #-------------------------------------------------------------
  # Source/Destination tests
  #-------------------------------------------------------------

  TEST_RR_SRC1_EQ_DEST( 22, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2d2c:	01600193          	li	gp,22
    2d30:	800000b7          	lui	ra,0x80000
    2d34:	00700113          	li	sp,7
    2d38:	4020d0b3          	sra	ra,ra,sp
    2d3c:	ff0003b7          	lui	t2,0xff000
    2d40:	32709c63          	bne	ra,t2,3078 <fail>

00002d44 <test_23>:
  TEST_RR_SRC2_EQ_DEST( 23, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2d44:	01700193          	li	gp,23
    2d48:	800000b7          	lui	ra,0x80000
    2d4c:	00e00113          	li	sp,14
    2d50:	4020d133          	sra	sp,ra,sp
    2d54:	fffe03b7          	lui	t2,0xfffe0
    2d58:	32711063          	bne	sp,t2,3078 <fail>

00002d5c <test_24>:
  TEST_RR_SRC12_EQ_DEST( 24, sra, 0, 7 );
    2d5c:	01800193          	li	gp,24
    2d60:	00700093          	li	ra,7
    2d64:	4010d0b3          	sra	ra,ra,ra
    2d68:	00000393          	li	t2,0
    2d6c:	30709663          	bne	ra,t2,3078 <fail>

00002d70 <test_25>:

  #-------------------------------------------------------------
  # Bypassing tests
  #-------------------------------------------------------------

  TEST_RR_DEST_BYPASS( 25, 0, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2d70:	01900193          	li	gp,25
    2d74:	00000213          	li	tp,0
    2d78:	800000b7          	lui	ra,0x80000
    2d7c:	00700113          	li	sp,7
    2d80:	4020d733          	sra	a4,ra,sp
    2d84:	00070313          	mv	t1,a4
    2d88:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2d8c:	00200293          	li	t0,2
    2d90:	fe5214e3          	bne	tp,t0,2d78 <test_25+0x8>
    2d94:	ff0003b7          	lui	t2,0xff000
    2d98:	2e731063          	bne	t1,t2,3078 <fail>

00002d9c <test_26>:
  TEST_RR_DEST_BYPASS( 26, 1, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2d9c:	01a00193          	li	gp,26
    2da0:	00000213          	li	tp,0
    2da4:	800000b7          	lui	ra,0x80000
    2da8:	00e00113          	li	sp,14
    2dac:	4020d733          	sra	a4,ra,sp
    2db0:	00000013          	nop
    2db4:	00070313          	mv	t1,a4
    2db8:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2dbc:	00200293          	li	t0,2
    2dc0:	fe5212e3          	bne	tp,t0,2da4 <test_26+0x8>
    2dc4:	fffe03b7          	lui	t2,0xfffe0
    2dc8:	2a731863          	bne	t1,t2,3078 <fail>

00002dcc <test_27>:
  TEST_RR_DEST_BYPASS( 27, 2, sra, 0xffffffffffffffff, 0xffffffff80000000, 31 );
    2dcc:	01b00193          	li	gp,27
    2dd0:	00000213          	li	tp,0
    2dd4:	800000b7          	lui	ra,0x80000
    2dd8:	01f00113          	li	sp,31
    2ddc:	4020d733          	sra	a4,ra,sp
    2de0:	00000013          	nop
    2de4:	00000013          	nop
    2de8:	00070313          	mv	t1,a4
    2dec:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2df0:	00200293          	li	t0,2
    2df4:	fe5210e3          	bne	tp,t0,2dd4 <test_27+0x8>
    2df8:	fff00393          	li	t2,-1
    2dfc:	26731e63          	bne	t1,t2,3078 <fail>

00002e00 <test_28>:

  TEST_RR_SRC12_BYPASS( 28, 0, 0, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2e00:	01c00193          	li	gp,28
    2e04:	00000213          	li	tp,0
    2e08:	800000b7          	lui	ra,0x80000
    2e0c:	00700113          	li	sp,7
    2e10:	4020d733          	sra	a4,ra,sp
    2e14:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2e18:	00200293          	li	t0,2
    2e1c:	fe5216e3          	bne	tp,t0,2e08 <test_28+0x8>
    2e20:	ff0003b7          	lui	t2,0xff000
    2e24:	24771a63          	bne	a4,t2,3078 <fail>

00002e28 <test_29>:
  TEST_RR_SRC12_BYPASS( 29, 0, 1, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2e28:	01d00193          	li	gp,29
    2e2c:	00000213          	li	tp,0
    2e30:	800000b7          	lui	ra,0x80000
    2e34:	00e00113          	li	sp,14
    2e38:	00000013          	nop
    2e3c:	4020d733          	sra	a4,ra,sp
    2e40:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2e44:	00200293          	li	t0,2
    2e48:	fe5214e3          	bne	tp,t0,2e30 <test_29+0x8>
    2e4c:	fffe03b7          	lui	t2,0xfffe0
    2e50:	22771463          	bne	a4,t2,3078 <fail>

00002e54 <test_30>:
  TEST_RR_SRC12_BYPASS( 30, 0, 2, sra, 0xffffffffffffffff, 0xffffffff80000000, 31 );
    2e54:	01e00193          	li	gp,30
    2e58:	00000213          	li	tp,0
    2e5c:	800000b7          	lui	ra,0x80000
    2e60:	01f00113          	li	sp,31
    2e64:	00000013          	nop
    2e68:	00000013          	nop
    2e6c:	4020d733          	sra	a4,ra,sp
    2e70:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2e74:	00200293          	li	t0,2
    2e78:	fe5212e3          	bne	tp,t0,2e5c <test_30+0x8>
    2e7c:	fff00393          	li	t2,-1
    2e80:	1e771c63          	bne	a4,t2,3078 <fail>

00002e84 <test_31>:
  TEST_RR_SRC12_BYPASS( 31, 1, 0, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2e84:	01f00193          	li	gp,31
    2e88:	00000213          	li	tp,0
    2e8c:	800000b7          	lui	ra,0x80000
    2e90:	00000013          	nop
    2e94:	00700113          	li	sp,7
    2e98:	4020d733          	sra	a4,ra,sp
    2e9c:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2ea0:	00200293          	li	t0,2
    2ea4:	fe5214e3          	bne	tp,t0,2e8c <test_31+0x8>
    2ea8:	ff0003b7          	lui	t2,0xff000
    2eac:	1c771663          	bne	a4,t2,3078 <fail>

00002eb0 <test_32>:
  TEST_RR_SRC12_BYPASS( 32, 1, 1, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2eb0:	02000193          	li	gp,32
    2eb4:	00000213          	li	tp,0
    2eb8:	800000b7          	lui	ra,0x80000
    2ebc:	00000013          	nop
    2ec0:	00e00113          	li	sp,14
    2ec4:	00000013          	nop
    2ec8:	4020d733          	sra	a4,ra,sp
    2ecc:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2ed0:	00200293          	li	t0,2
    2ed4:	fe5212e3          	bne	tp,t0,2eb8 <test_32+0x8>
    2ed8:	fffe03b7          	lui	t2,0xfffe0
    2edc:	18771e63          	bne	a4,t2,3078 <fail>

00002ee0 <test_33>:
  TEST_RR_SRC12_BYPASS( 33, 2, 0, sra, 0xffffffffffffffff, 0xffffffff80000000, 31 );
    2ee0:	02100193          	li	gp,33
    2ee4:	00000213          	li	tp,0
    2ee8:	800000b7          	lui	ra,0x80000
    2eec:	00000013          	nop
    2ef0:	00000013          	nop
    2ef4:	01f00113          	li	sp,31
    2ef8:	4020d733          	sra	a4,ra,sp
    2efc:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2f00:	00200293          	li	t0,2
    2f04:	fe5212e3          	bne	tp,t0,2ee8 <test_33+0x8>
    2f08:	fff00393          	li	t2,-1
    2f0c:	16771663          	bne	a4,t2,3078 <fail>

00002f10 <test_34>:

  TEST_RR_SRC21_BYPASS( 34, 0, 0, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2f10:	02200193          	li	gp,34
    2f14:	00000213          	li	tp,0
    2f18:	00700113          	li	sp,7
    2f1c:	800000b7          	lui	ra,0x80000
    2f20:	4020d733          	sra	a4,ra,sp
    2f24:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2f28:	00200293          	li	t0,2
    2f2c:	fe5216e3          	bne	tp,t0,2f18 <test_34+0x8>
    2f30:	ff0003b7          	lui	t2,0xff000
    2f34:	14771263          	bne	a4,t2,3078 <fail>

00002f38 <test_35>:
  TEST_RR_SRC21_BYPASS( 35, 0, 1, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2f38:	02300193          	li	gp,35
    2f3c:	00000213          	li	tp,0
    2f40:	00e00113          	li	sp,14
    2f44:	800000b7          	lui	ra,0x80000
    2f48:	00000013          	nop
    2f4c:	4020d733          	sra	a4,ra,sp
    2f50:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2f54:	00200293          	li	t0,2
    2f58:	fe5214e3          	bne	tp,t0,2f40 <test_35+0x8>
    2f5c:	fffe03b7          	lui	t2,0xfffe0
    2f60:	10771c63          	bne	a4,t2,3078 <fail>

00002f64 <test_36>:
  TEST_RR_SRC21_BYPASS( 36, 0, 2, sra, 0xffffffffffffffff, 0xffffffff80000000, 31 );
    2f64:	02400193          	li	gp,36
    2f68:	00000213          	li	tp,0
    2f6c:	01f00113          	li	sp,31
    2f70:	800000b7          	lui	ra,0x80000
    2f74:	00000013          	nop
    2f78:	00000013          	nop
    2f7c:	4020d733          	sra	a4,ra,sp
    2f80:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2f84:	00200293          	li	t0,2
    2f88:	fe5212e3          	bne	tp,t0,2f6c <test_36+0x8>
    2f8c:	fff00393          	li	t2,-1
    2f90:	0e771463          	bne	a4,t2,3078 <fail>

00002f94 <test_37>:
  TEST_RR_SRC21_BYPASS( 37, 1, 0, sra, 0xffffffffff000000, 0xffffffff80000000, 7  );
    2f94:	02500193          	li	gp,37
    2f98:	00000213          	li	tp,0
    2f9c:	00700113          	li	sp,7
    2fa0:	00000013          	nop
    2fa4:	800000b7          	lui	ra,0x80000
    2fa8:	4020d733          	sra	a4,ra,sp
    2fac:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2fb0:	00200293          	li	t0,2
    2fb4:	fe5214e3          	bne	tp,t0,2f9c <test_37+0x8>
    2fb8:	ff0003b7          	lui	t2,0xff000
    2fbc:	0a771e63          	bne	a4,t2,3078 <fail>

00002fc0 <test_38>:
  TEST_RR_SRC21_BYPASS( 38, 1, 1, sra, 0xfffffffffffe0000, 0xffffffff80000000, 14 );
    2fc0:	02600193          	li	gp,38
    2fc4:	00000213          	li	tp,0
    2fc8:	00e00113          	li	sp,14
    2fcc:	00000013          	nop
    2fd0:	800000b7          	lui	ra,0x80000
    2fd4:	00000013          	nop
    2fd8:	4020d733          	sra	a4,ra,sp
    2fdc:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    2fe0:	00200293          	li	t0,2
    2fe4:	fe5212e3          	bne	tp,t0,2fc8 <test_38+0x8>
    2fe8:	fffe03b7          	lui	t2,0xfffe0
    2fec:	08771663          	bne	a4,t2,3078 <fail>

00002ff0 <test_39>:
  TEST_RR_SRC21_BYPASS( 39, 2, 0, sra, 0xffffffffffffffff, 0xffffffff80000000, 31 );
    2ff0:	02700193          	li	gp,39
    2ff4:	00000213          	li	tp,0
    2ff8:	01f00113          	li	sp,31
    2ffc:	00000013          	nop
    3000:	00000013          	nop
    3004:	800000b7          	lui	ra,0x80000
    3008:	4020d733          	sra	a4,ra,sp
    300c:	00120213          	add	tp,tp,1 # 1 <_start+0x1>
    3010:	00200293          	li	t0,2
    3014:	fe5212e3          	bne	tp,t0,2ff8 <test_39+0x8>
    3018:	fff00393          	li	t2,-1
    301c:	04771e63          	bne	a4,t2,3078 <fail>

00003020 <test_40>:

  TEST_RR_ZEROSRC1( 40, sra, 0, 15 );
    3020:	02800193          	li	gp,40
    3024:	00f00093          	li	ra,15
    3028:	40105133          	sra	sp,zero,ra
    302c:	00000393          	li	t2,0
    3030:	04711463          	bne	sp,t2,3078 <fail>

00003034 <test_41>:
  TEST_RR_ZEROSRC2( 41, sra, 32, 32 );
    3034:	02900193          	li	gp,41
    3038:	02000093          	li	ra,32
    303c:	4000d133          	sra	sp,ra,zero
    3040:	02000393          	li	t2,32
    3044:	02711a63          	bne	sp,t2,3078 <fail>

00003048 <test_42>:
  TEST_RR_ZEROSRC12( 42, sra, 0 );
    3048:	02a00193          	li	gp,42
    304c:	400050b3          	sra	ra,zero,zero
    3050:	00000393          	li	t2,0
    3054:	02709263          	bne	ra,t2,3078 <fail>

00003058 <test_43>:
  TEST_RR_ZERODEST( 43, sra, 1024, 2048 );
    3058:	02b00193          	li	gp,43
    305c:	40000093          	li	ra,1024
    3060:	00001137          	lui	sp,0x1
    3064:	80010113          	add	sp,sp,-2048 # 800 <trap_entry+0x6ac>
    3068:	4020d033          	sra	zero,ra,sp
    306c:	00000393          	li	t2,0
    3070:	00701463          	bne	zero,t2,3078 <fail>

  TEST_PASSFAIL
    3074:	00301a63          	bne	zero,gp,3088 <pass>

00003078 <fail>:
    3078:	00119513          	sll	a0,gp,0x1
    307c:	00050063          	beqz	a0,307c <fail+0x4>
    3080:	00156513          	or	a0,a0,1
    3084:	00000073          	ecall

00003088 <pass>:
    3088:	00100513          	li	a0,1
    308c:	00000073          	ecall

RVTEST_CODE_END
    3090:	c0001073          	unimp
